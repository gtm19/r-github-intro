---
title: "Git and GitHub"
---

## Introduction

### What is Git?

Why write a definition when you can simply lift one from Wikipedia[^1]?

[^1]: [Wikipedia link](https://en.wikipedia.org/wiki/Git)

> Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).

In simple terms: software is simply a collection of text files with lines of code in them, and adding to a software project essentially amounts to adding and removing different lines of code. Git provides a way to track these modifications, and to bring together multiple sets of modifications from different developers: even when they have all (unbeknownst to them) been working on the same lines of code.

It is most useful when working with others, but Git is also useful when working solo, since each modification can essentially be considered a snapshot of the project's progress, and this can be restored with ease.

### What is GitHub?

::: callout-important
Git and GitHub are not the same thing! This cannot be overstated.
:::

If you're going to be working on a software project, using Git, with other developers, you need somewhere to store the "official" version of your code: to which individual developers will make changes as and when features are added.

A bewildering number of developers use [GitHub](https://github.com){target="_blank"} for this purpose; the purpose being to act as a *remote repository* on which to store code.

Alternatives (such as [GitLab](https://about.gitlab.com/){target="_blank"} and [Bitbucket](https://bitbucket.org/product){target="_blank"}), but they are nowhere near as widely used as GitHub.

## Basic Git commands

Git is an extremely powerful, and at times [dangerously confusing](https://ohshitgit.com/){target="_blank"} tool, but you can get surprisingly far with very few commands.

In order to learn about them, you first need a repository to work with. In order to do this, you're going to *fork* (basically create a copy) of one I created earlier:

<btn> <a href="https://github.com/gtm19/r-intro-exercises/fork"> Fork my repo </a> </btn>

You should now see a copy of this repository on your GitHub account. The next task is to download a copy to work on on your machine. For that, we need `git clone`.

### `git clone`

If you open your repository, you should see a green *Code* button:

![](https://docs.github.com/assets/cb-20363/images/help/repository/code-button.png){.border fig-alt="the green code button on GitHub" fig-align="center" width="400"}

Click on this to get your `url`:

![](https://docs.github.com/assets/cb-36330/images/help/repository/https-url-clone.png){.border fig-alt="git clone URL for a repo" fig-align="center" width="400"}

It should look something like `git@github.com:some-username/r-intro-exercises.git` or `https://github.com/some-username/r-intro-exercises.git`

Copy this, and go to the terminal / command line on your machine, and run the following:

``` bash
git clone PASTE_YOUR_URL_HERE
```

You should see something like the following:

    Cloning into 'r-intro-exercises'...
    remote: Enumerating objects: 16, done.
    remote: Counting objects: 100% (16/16), done.
    remote: Compressing objects: 100% (10/10), done.
    remote: Total 16 (delta 0), reused 16 (delta 0), pack-reused 0
    Receiving objects: 100% (16/16), 8.14 KiB | 8.14 MiB/s, done.

Then navigate to that folder by running the following in your terminal:

``` bash
cd r-intro-exercises
```

You are now inside a directory which is a copy of the remote repository on your GitHub. You will be making changes to the files in these directories locally and pushing them back to your remote repository once you're happy with them.
