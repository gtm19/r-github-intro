[
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "git and GitHub",
    "section": "",
    "text": "A little about git and GitHub"
  },
  {
    "objectID": "wrap-up.html",
    "href": "wrap-up.html",
    "title": "Wrap up",
    "section": "",
    "text": "Wrapping it all up"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the R / Git / GitHub introductory course.\n\n\n\n\nPlease use the links on the left (or at the bottom of each page) to navigate."
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "R",
    "section": "",
    "text": "Something about R\n\n\n\n\n\n\nTip\n\n\n\nAdding a # to a line of R code comments out the rest of the line: meaning that the R interpreter ignores anything written after the #"
  },
  {
    "objectID": "Setup.html#installing-r",
    "href": "Setup.html#installing-r",
    "title": "Setup",
    "section": "Installing R",
    "text": "Installing R\nR is a programming language, and RStudio is a popular GUI / editor for R. Here we will install both.\n\n\n\n\n\n\nNote\n\n\n\nWhilst you can (and, in fact, I usually do) use a different text editor for R, I strongly recommend starting with RStudio.\n\n\n\nR\nFollow the installation instructions for your operating system below.\n\nmacOSWindowsLinux (Ubuntu)\n\n\nGo the the CRAN website, download the .pkg installer, and run it.\nAlternatively, if you have Homebrew installed, you can run the following command in your terminal:\nbrew install r\n\n\nGo to the CRAN website, download the .exe installer, and run it.\n\n\nRun the following commands in your terminal:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: 298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nFollowed by:\nsudo apt install --no-install-recommends r-base\nMore detail on these instructions can be found on the CRAN website.\n\n\n\n\n\nRStudio\nGo to the RStudio website and download (and run) the appropriate installer for your operating system.\nMac users with homebrew installed can also run the following in their terminal:\nbrew install --cask rstudio"
  },
  {
    "objectID": "Setup.html#git",
    "href": "Setup.html#git",
    "title": "Setup",
    "section": "git",
    "text": "git\n\ngit itself\nInstallation instructions for git can be found on git-scm.com. Abridged instructions are included below.\n\nmacOSWindowsLinux (Ubuntu)\n\n\nRun the following command in your terminal:\ngit --version\nIf you don’t already have it installed, the terminal will prompt you to do so.\n\n\nClick here, download the appropriate Standalone Installer .exe file (depending on whether your system is 32 or 64 bit), and run it.\n\n\nRun the following command in your terminal:\nsudo apt install git-all\n\n\n\n\n\nGitHub\n\nAccount creation\nYou will need to create an account on GitHub (if you don’t already have one).\n\n\nGitHub Command Line Interface (CLI)\nInstallation instructions for GitHub’s CLI can be found on the project’s GitHub repository. A summary of the most useful commands/instructions is below.\n\nmacOS (+ homebrew)WindowsLinux (Ubuntu)\n\n\nRun the following command in your terminal:\nbrew install gh\n\n\nDownload one of the .msi or .zip files from the bottom of this page and install.\n\n\nRun the following command(s) in your terminal:\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\nsudo apt update\nsudo apt install gh\n\n\n\nOnce installed, log in by running\ngh auth login -w\n\n\n\nSSH key\nYou should also (preferably) create an SSH key and add it to your account (again, if you haven’t already)."
  },
  {
    "objectID": "github.html#introduction",
    "href": "github.html#introduction",
    "title": "Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\n\nWhat is Git?\nWhy write a definition when you can simply lift one from Wikipedia1?\n\nGit is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\n\nIn simple terms: software is simply a collection of text files with lines of code in them, and adding to a software project essentially amounts to adding and removing different lines of code. Git provides a way to track these modifications, and to bring together multiple sets of modifications from different developers: even when they have all (unbeknownst to them) been working on the same lines of code.\nIt is most useful when working with others, but Git is also useful when working solo, since each modification can essentially be considered a snapshot of the project’s progress, and this can be restored with ease.\n\n\nWhat is GitHub?\n\n\n\n\n\n\nImportant\n\n\n\nGit and GitHub are not the same thing! This cannot be overstated.\n\n\nIf you’re going to be working on a software project, using Git, with other developers, you need somewhere to store the “official” version of your code: to which individual developers will make changes as and when features are added.\nA bewildering number of developers use GitHub for this purpose; the purpose being to act as a remote repository on which to store code.\nAlternatives (such as GitLab and Bitbucket), but they are nowhere near as widely used as GitHub."
  },
  {
    "objectID": "github.html#basic-git-commands",
    "href": "github.html#basic-git-commands",
    "title": "Git and GitHub",
    "section": "Basic Git commands",
    "text": "Basic Git commands\nGit is an extremely powerful, and at times dangerously confusing tool, but you can get surprisingly far with very few commands.\n\n\n\n\n\n\nTip\n\n\n\nThis is a far from comprehensive list of Git commands. See Further Reading for more thorough guides\n\n\nIn order to learn about them, you first need a repository to work with. In order to do this, you’re going to fork (basically create a copy) of one I created earlier:\n  Fork my repo  \nYou should now see a copy of this repository on your GitHub account. The next task is to download a copy to work on on your machine. For that, we need git clone.\n\ngit clone\nIf you open your repository, you should see a green Code button:\n\n\n\n\n\nClick on this to get your url:\n\n\n\n\n\nIt should look something like git@github.com:some-username/r-intro-exercises.git or https://github.com/some-username/r-intro-exercises.git\nCopy this, and go to the terminal / command line on your machine, and run the following:\ngit clone PASTE_YOUR_URL_HERE\nYou should see something like the following:\nCloning into 'r-intro-exercises'...\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 16 (delta 0), reused 16 (delta 0), pack-reused 0\nReceiving objects: 100% (16/16), 8.14 KiB | 8.14 MiB/s, done.\nThen navigate to that folder by running the following in your terminal:\ncd r-intro-exercises\nYou are now inside a directory which is a copy of the remote repository on your GitHub. You will be making changes to the files in these directories locally and pushing them back to your remote repository once you’re happy with them.\n\nOpening the project in RStudio\nNext you’ll want to open the project in RStudio.\nFire up RStudio and click on the menu in the top right, then Open Project…\n\n\n\n\n\nNavigate to the directory where you cloned your repository above, and select the .Rproj file within it.\nIf you have any issues opening this project, take a look at this help documentation from RStudio.\nWhen you first open the project, you’ll see some output in the R console like this:\nrenv library out of date - automatically restoring...\nThe following package(s) will be updated:\n\n# CRAN ===============================\n- R6           [* -> 2.5.1]\n- brio         [* -> 1.1.3]\n...\n...\n...\n- waldo        [* -> 0.4.0]\n- withr        [* -> 2.5.0]\n\nDo you want to proceed? [y/N]: \nType y and hit Enter.\nGo back to your terminal / command prompt and run:\nRscript test.R --example\nThis should output something like the following:\n══ Testing test-exercises_000.R ════════════════════════════════════════════════════════════\n[ FAIL 3 | WARN 0 | SKIP 0 | PASS 0 ]\n\n── Failure (test-exercises_000.R:4:3): dbl_fun works ───────────────────────────\ndbl_fun(2) not equal to 4.\ntarget is NULL, current is numeric\n\n── Failure (test-exercises_000.R:5:3): dbl_fun works ───────────────────────────\ndbl_fun(100) not equal to 200.\ntarget is NULL, current is numeric\n\n── Failure (test-exercises_000.R:6:3): dbl_fun works ───────────────────────────\ndbl_fun(402) not equal to 804.\ntarget is NULL, current is numeric\n\n[ FAIL 3 | WARN 0 | SKIP 0 | PASS 0 ]\nDon’t worry that these are all failing at the moment: we will be fixing these problems momentarily.\n\n\n\ngit status\nFor a command which technically does nothing, git status is very important. It is incredibly easy to cause a lot of damage to your project by running certain commands whilst making assumptions (but not checking) what the current status of your repository is.\n\n\n\n\n\n\nImportant\n\n\n\nAs a rule of thumb, try to run git status before and after any other Git operation. It could save you a lot of heartache.\n\n\nYou run it by running the following in your terminal / command prompt:\ngit status\nYou should get output which looks something like this:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nnothing to commit, working tree clean\nThis means that you haven’t done anything locally beyond that which exists in the remote repository.\nBefore we continue, it is worth understanding the workflow of Git, by looking at the following diagram, from the Git documentation2\n\n\n\n\n\nYou start over on the left: in your working directory, with no changes to your existing files. Then, you make changes to your files, and you save them. At this point, you have done nothing different than you would when making incremental changes to (say) a Microsoft Word document.\n\n\n\n\n\n\nCaution\n\n\n\nProbably don’t use Git to manage projects with Microsoft Word documents: they might look like it, but they are not just text files.\n\n\n\n\ngit add\ngit add is the command you use to add modified files to the Staging Area. In order for it to do anything, you first need to modify a file.\nOpen up exercises/exercises_000.R in RStudio in your cloned repository, and you should see the following:\n#' make changes to the function below to make it double any number\ndbl_fun <- function(number) {\n  # REMOVE THE # at the start of the line below to fix your errors\n  # number * 2\n}\nIn R scripts (as we will learn) adding a # at the start of a line of code comments out that line: meaning you can write anything you want and the R interpreter will ignore it.\nThe reason the tests were failing is that the body of the function is commented out - fix it by removing the # and saving the file.\nIf you run git status at this point, you’d might see something like the following:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   exercises/exercises_000.R\nThis tells us that one existing file – which Git was tracking – has been modified. However, we are still at the very left hand side of the diagram above. The next step is to stage these changes. To do that, you need git add .\nYou can add individual files:\ngit add exercises/exercises_000.R\nor you can add a fileglob (in this case: all files with a .R extension):\ngit add **/*.R\nor you can add everything in the directory:\ngit add --all\n# or\ngit add .\nNow, git status will show something like this:\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n    modified:   exercises/exercises_000.R\nThis output says there are changes to be committed - this is the final stage in the git workflow.\n\n\ngit commit\nNow the changes have been staged, we are ready to commit them.\nMost of the time, you will use git commit with the message flag, as follows:\ngit commit -m \"PUT YOUR MESSAGE HERE\"\nSo, in this case, maybe you’d want to do something like:\ngit commit -m \"uncomment body of dbl_fun function\"\nThis will product output like:\n[main 3453a03] uncomment body of dbl_fun function\n 1 file changed, 1 insertion(+), 1 deletion(-)\nAnd running git status again shows we’re back to the first stage in the workflow, but that now we’re 1 commit ahead than the origin (i.e. remote) version of our repository. To update that, we will need git push.\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\n  (use \"git push\" to publish your local commits)\n\nnothing to commit, working tree clean\n\n\ngit push\nGit push applies the updates from the local version of your repository to the corresponding branch of the remote repository.\nIf (as we are here) we are on the main branch, and (as is often the case) the shorthand name being used for our remote repository is origin, then updating the remote repository is done like so:\ngit push origin main\nThis will produce something like:\nEnumerating objects: 23, done.\nCounting objects: 100% (23/23), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (12/12), done.\nWriting objects: 100% (13/13), 148.52 KiB | 2.75 MiB/s, done.\nTotal 13 (delta 8), reused 0 (delta 0), pack-reused 0\nremote: Resolving deltas: 100% (8/8), completed with 6 local objects.\nTo github.com:gtm19/r-intro-exercises.git\n   f510bcf..5f00bd1  main -> main\nIf, on the other hand, you know the remote version of the repository is more up to date than your local version (if, say, another developer had made changes), then you need to incorporate those changes into the local version using git pull.\n\n\ngit pull\nThis command is basically the antagonist to git push:\ngit pull origin main\nWhich will produce output like this:\nFrom github.com:gtm19/r-intro-exercises\n * branch            github     -> FETCH_HEAD\nAlready up to date.\nThe output would be more exciting if some changes had actually been made remotely.\n\n\ngit branch\nUsually, when adding a new feature, you would create a new branch of your repository: which allows you to add to what is already in the repo, only folding your changes back into the main branch when you’re sure they’re correct.\nIn order to create a new branch (in our case, to add a function which triples a number), use the following command:\ngit branch add-triple\nThen you need to checkout your new branch:\ngit checkout add-triple\nNow running the command git branch with nothing else shows you which branch you’re on:\ngit branch\n# * add-triple\n#   main\nCopy and paste the following into the exercises/exercises_000.R file, and save it:\ntriple_fun <- function(number) {\n  number * 3\n}\nThen git add, and git commit as usual.\nNow the new feature has been added, it needs to be incorporated into the main branch. git merge is the command to do this.\n\n\ngit merge\nUsing git merge, you create a new commit on an existing branch, which adds in all the new stuff from another branch.\nBefore you start, you need to switch back to the receiving branch (main, in this case):\ngit checkout main\n…and then merge in the feature branch…\ngit merge add-triple\nUpdating 3453a03..d3ce0f1\nFast-forward\n exercises/exercises_000.R | 4 ++++\n 1 file changed, 4 insertions(+)\nYou can then delete your feature branch, since the changes have now been incorporated:\ngit branch -d add-triple\n\nPull Requests\nIn reality, often developers do not merge changes into main locally and then push them to the remote repository - since often the remote repository is the absolute version of the code, from which the app is deployed.\nInstead, you would create a pull request on GitHub and ask them to review and (if they’re happy) approve your request, merging and deleting the feature branch.\nFor now, this is beyond the scope of this workshop."
  },
  {
    "objectID": "github.html#further-reading",
    "href": "github.html#further-reading",
    "title": "Git and GitHub",
    "section": "Further Reading",
    "text": "Further Reading\n\nPro Git book\nLearn Git Branching (game)"
  },
  {
    "objectID": "r.html#introduction",
    "href": "r.html#introduction",
    "title": "R",
    "section": "Introduction",
    "text": "Introduction\n\nWhat is R?\nStarting with a good old definition from Wikipedia1:\n\nR is a programming language for statistical computing and graphics supported by the R Core Team and the R Foundation for Statistical Computing. Created by statisticians Ross Ihaka and Robert Gentleman, R is used among data miners and statisticians for data analysis and developing statistical software.\n\nIt may have originated as a language for statistical computing, and it still is used as such, but it is increasingly used as a more general purpose data analysis tool: for things like web scraping, data engineering, and journalism.\nIt is also a functional programming language: which in layman’s terms means that, in R, you define functions and things into them to produce some result.\nSo, for example, to take a lower case string and make it upper case in R, you pass the string into the toupper() function:\n\ntoupper(\"small\")\n\n[1] \"SMALL\"\n\n\nThis is different from object oriented languages like Ruby, where objects of a certain class have methods (basically functions) built into them. They carry them around, waiting for you to call the method on them.\nIn Ruby, the same task of capitalising a string is done as follows (puts is just the command to print the output):\n\nputs \"small\".upcase\n\nSMALL\n\n\nWe won’t dwell on the basics of R too long here: it’s better to skip to doing useful stuff and fill in the basics later."
  },
  {
    "objectID": "r.html#basics-of-r",
    "href": "r.html#basics-of-r",
    "title": "R",
    "section": "Basics of R",
    "text": "Basics of R\n\nData Types\nR has 6 main data types (though usually you’ll only come across the first 4 of them):\n\ncharacter (like \"hello, world!\")\nnumeric (aka double) (real or decimal, like 3 and 3.14)\ninteger (like 9L: where the L tells R it is an integer specifically)\nlogical (TRUE or FALSE)\ncomplex (like 4+9i)\nraw (which most of the time you really don’t need to worry about)\n\nR builds more complex data types from these basic building blocks: but underneath it all, every data object in R has to be one of the above.\nThis is done by adding classes to data objects. Classes are beyond the scope of this workshop, but what you need to know is that classes tell R to treat some objects in a different way when you use generic functions on them.\nTake the following example:\n\ntoday <- Sys.Date()\ntoday\n\n[1] \"2022-03-19\"\n\n\nOf the 6 data types listed above, today looks most like a character string. You can use typeof() to see what it actually is, and class to see what class it has been given so that R knows to treat it differently.\n\ntypeof(today)\n\n[1] \"double\"\n\nclass(today)\n\n[1] \"Date\"\n\n\nYou can see the actual data object in all its classless glory using the unclass() function:\n\nunclass(today)\n\n[1] 19070\n\n\nYou’ll see that an object with class Date is just the number of days since 1 January 1970 (the Unix epoch2).\n\n\n\n\n\n\n\nTip\n\n\n\nAdding a # to a line of R code comments out the rest of the line: meaning that the R interpreter ignores anything written after the #"
  }
]