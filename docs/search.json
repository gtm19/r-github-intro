[
  {
    "objectID": "github.html",
    "href": "github.html",
    "title": "git and GitHub",
    "section": "",
    "text": "A little about git and GitHub"
  },
  {
    "objectID": "wrap-up.html",
    "href": "wrap-up.html",
    "title": "Wrap up",
    "section": "",
    "text": "Wrapping it all up"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the R / git / GitHub introductory course.\nPlease use the links on the left (or at the bottom of each page) to navigate."
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "R",
    "section": "",
    "text": "Something about R"
  },
  {
    "objectID": "Setup.html#installing-r",
    "href": "Setup.html#installing-r",
    "title": "Setup",
    "section": "Installing R",
    "text": "Installing R\nR is a programming language, and RStudio is a popular GUI / editor for R. Here we will install both.\n\n\n\n\n\n\nNote\n\n\n\nWhilst you can (and, in fact, I usually do) use a different text editor for R, I strongly recommend starting with RStudio.\n\n\n\nR\nFollow the installation instructions for your operating system below.\n\nmacOSWindowsLinux (Ubuntu)\n\n\nGo the the CRAN website, download the .pkg installer, and run it.\nAlternatively, if you have Homebrew installed, you can run the following command in your terminal:\nbrew install r\n\n\nGo to the CRAN website, download the .exe installer, and run it.\n\n\nRun the following commands in your terminal:\n# update indices\nsudo apt update -qq\n# install two helper packages we need\nsudo apt install --no-install-recommends software-properties-common dirmngr\n# add the signing key (by Michael Rutter) for these repos\n# To verify key, run gpg --show-keys /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc \n# Fingerprint: 298A3A825C0D65DFD57CBB651716619E084DAB9\nwget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc\n# add the R 4.0 repo from CRAN -- adjust 'focal' to 'groovy' or 'bionic' as needed\nsudo add-apt-repository \"deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\"\nFollowed by:\nsudo apt install --no-install-recommends r-base\nMore detail on these instructions can be found on the CRAN website.\n\n\n\n\n\nRStudio\nGo to the RStudio website and download (and run) the appropriate installer for your operating system.\nMac users with homebrew installed can also run the following in their terminal:\nbrew install --cask rstudio"
  },
  {
    "objectID": "Setup.html#git",
    "href": "Setup.html#git",
    "title": "Setup",
    "section": "git",
    "text": "git\n\ngit itself\nInstallation instructions for git can be found on git-scm.com. Abridged instructions are included below.\n\nmacOSWindowsLinux (Ubuntu)\n\n\nRun the following command in your terminal:\ngit --version\nIf you don’t already have it installed, the terminal will prompt you to do so.\n\n\nClick here, download the appropriate Standalone Installer .exe file (depending on whether your system is 32 or 64 bit), and run it.\n\n\nRun the following command in your terminal:\nsudo apt install git-all\n\n\n\n\n\nGitHub\n\nAccount creation\nYou will need to create an account on GitHub (if you don’t already have one).\n\n\nGitHub Command Line Interface (CLI)\nInstallation instructions for GitHub’s CLI can be found on the project’s GitHub repository. A summary of the most useful commands/instructions is below.\n\nmacOS (+ homebrew)WindowsLinux (Ubuntu)\n\n\nRun the following command in your terminal:\nbrew install gh\n\n\nDownload one of the .msi or .zip files from the bottom of this page and install.\n\n\nRun the following command(s) in your terminal:\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null\nsudo apt update\nsudo apt install gh\n\n\n\nOnce installed, log in by running\ngh auth login -w\n\n\n\nSSH key\nYou should also (preferably) create an SSH key and add it to your account (again, if you haven’t already)."
  },
  {
    "objectID": "github.html#introduction",
    "href": "github.html#introduction",
    "title": "Git and GitHub",
    "section": "Introduction",
    "text": "Introduction\n\nWhat is Git?\nWhy write a definition when you can simply lift one from Wikipedia1?\n\nGit is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\n\nIn simple terms: software is simply a collection of text files with lines of code in them, and adding to a software project essentially amounts to adding and removing different lines of code. Git provides a way to track these modifications, and to bring together multiple sets of modifications from different developers: even when they have all (unbeknownst to them) been working on the same lines of code.\nIt is most useful when working with others, but Git is also useful when working solo, since each modification can essentially be considered a snapshot of the project’s progress, and this can be restored with ease.\n\n\nWhat is GitHub?\n\n\n\n\n\n\nImportant\n\n\n\nGit and GitHub are not the same thing! This cannot be overstated.\n\n\nIf you’re going to be working on a software project, using Git, with other developers, you need somewhere to store the “official” version of your code: to which individual developers will make changes as and when features are added.\nA bewildering number of developers use GitHub for this purpose; the purpose being to act as a remote repository on which to store code.\nAlternatives (such as GitLab and Bitbucket), but they are nowhere near as widely used as GitHub."
  },
  {
    "objectID": "github.html#basic-git-commands",
    "href": "github.html#basic-git-commands",
    "title": "Git and GitHub",
    "section": "Basic Git commands",
    "text": "Basic Git commands\nGit is an extremely powerful, and at times dangerously confusing tool, but you can get surprisingly far with very few commands.\nIn order to learn about them, you first need a repository to work with. In order to do this, you’re going to fork (basically create a copy) of one I created earlier:\n  Fork my repo  \nYou should now see a copy of this repository on your GitHub account. The next task is to download a copy to work on on your machine. For that, we need git clone.\n\ngit clone\nIf you open your repository, you should see a green Code button:\n\n\n\n\n\nClick on this to get your url:\n\n\n\n\n\nIt should look something like git@github.com:some-username/r-intro-exercises.git or https://github.com/some-username/r-intro-exercises.git\nCopy this, and go to the terminal / command line on your machine, and run the following:\ngit clone PASTE_YOUR_URL_HERE\nYou should see something like the following:\nCloning into 'r-intro-exercises'...\nremote: Enumerating objects: 16, done.\nremote: Counting objects: 100% (16/16), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 16 (delta 0), reused 16 (delta 0), pack-reused 0\nReceiving objects: 100% (16/16), 8.14 KiB | 8.14 MiB/s, done.\nThen navigate to that folder by running the following in your terminal:\ncd r-intro-exercises\nYou are now inside a directory which is a copy of the remote repository on your GitHub. You will be making changes to the files in these directories locally and pushing them back to your remote repository once you’re happy with them."
  }
]